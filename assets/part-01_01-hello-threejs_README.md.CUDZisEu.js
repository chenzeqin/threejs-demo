import{u as F,S as C,P as v,A as f,B as A,M as w,a as B,W as D,O as x}from"./chunks/useContainer.DnsFfYTA.js";import{d as _,a1 as q,y as P,z as T,o as E,c as g,I as j,j as e,a as y,a2 as S}from"./chunks/framework.BU7m5Tfg.js";const M={name:"Helloword"},O=_({...M,setup(u){let a,t,s,i,p,n;const{el:r,width:h,height:l}=F(),{stop:m}=q(r,()=>{i.setSize(h.value,l.value),s.aspect=h.value/l.value,s.updateProjectionMatrix()});function b(){a=new C,s=new v(75,h.value/l.value,.1,1e3),s.position.x=1,s.position.y=1,s.position.z=5,p=new f(3),a.add(p);const o=new A(2,2,2),c=new w({color:16711935});t=new B(o,c),a.add(t),i=new D,i.setSize(h.value,l.value),r.value.appendChild(i.domElement),n=new x(s,i.domElement),s.position.set(0,20,100),n.update()}let k;function d(){k=requestAnimationFrame(d),i.render(a,s),t.rotation.y+=.01,n.update()}return P(()=>{b(),d()}),T(()=>{cancelAnimationFrame(k),i.dispose(),n.dispose(),m()}),(o,c)=>(E(),g("div",{ref_key:"el",ref:r,"h-500px":"",class:"border-2 border-gray-300"},null,512))}}),z=e("h1",{id:"setup-three-js",tabindex:"-1"},[y("setup three.js "),e("a",{class:"header-anchor",href:"#setup-three-js","aria-label":'Permalink to "setup three.js"'},"​")],-1),H=e("h2",{id:"preview",tabindex:"-1"},[y("preview "),e("a",{class:"header-anchor",href:"#preview","aria-label":'Permalink to "preview"'},"​")],-1),R=e("p",null,"this simple example shows how to create a simple cube in three.js and add some animation effects using the OrbitControls and requestAnimationFrame APIs.",-1),G=S(`<h2 id="install" tabindex="-1">install <a class="header-anchor" href="#install" aria-label="Permalink to &quot;install&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> three</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 安装ts类型文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @types/three</span></span></code></pre></div><h2 id="create-a-scene" tabindex="-1">create a scene <a class="header-anchor" href="#create-a-scene" aria-label="Permalink to &quot;create a scene&quot;">​</a></h2><p>Scenes allow you to set up what and where is to be rendered by three.js. This is where you place objects, lights and cameras.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Three </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;three&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// create a scene</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> scene</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Three.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Scene</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="create-a-camera" tabindex="-1">create a camera <a class="header-anchor" href="#create-a-camera" aria-label="Permalink to &quot;create a camera&quot;">​</a></h2><p>Cameras define where the scene is viewed from. You can create different types of cameras such as PerspectiveCamera, OrthographicCamera, and CubeCamera.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// create a camera</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> camera</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Three.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PerspectiveCamera</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">75</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, window.innerWidth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.innerHeight, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">camera.position.z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h3 id="camera-parameters" tabindex="-1">camera parameters <a class="header-anchor" href="#camera-parameters" aria-label="Permalink to &quot;camera parameters&quot;">​</a></h3><ul><li>fov: field of view, the angle between the top and bottom of the view frustum</li><li>aspect: the aspect ratio of the view, defined as the width divided by the height</li><li>near: the distance of the near clipping plane from the camera</li><li>far: the distance of the far clipping plane from the camera</li></ul><h2 id="create-a-renderer" tabindex="-1">create a renderer <a class="header-anchor" href="#create-a-renderer" aria-label="Permalink to &quot;create a renderer&quot;">​</a></h2><p>A renderer is responsible for rendering the scene to the canvas. You can create different types of renderers such as WebGLRenderer, CanvasRenderer, and SVGRenderer.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// create a renderer</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> renderer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Three.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WebGLRenderer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">renderer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(window.innerWidth, window.innerHeight);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.body.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendChild</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(renderer.domElement);</span></span></code></pre></div><h3 id="renderer-parameters" tabindex="-1">renderer parameters <a class="header-anchor" href="#renderer-parameters" aria-label="Permalink to &quot;renderer parameters&quot;">​</a></h3><ul><li>canvas: the canvas element to which the renderer will render</li><li>alpha: whether the canvas should have an alpha channel</li><li>antialias: whether to perform antialiasing</li><li>precision: the precision of the renderer, either &#39;highp&#39;, &#39;mediump&#39;, or &#39;lowp&#39;</li><li>preserveDrawingBuffer: whether to preserve the contents of the canvas between renders</li></ul><h2 id="create-a-cube" tabindex="-1">create a cube <a class="header-anchor" href="#create-a-cube" aria-label="Permalink to &quot;create a cube&quot;">​</a></h2><p>A cube is a basic shape in three.js. You can create a cube by creating a new instance of the CubeGeometry class and a new instance of the MeshBasicMaterial class.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// create a cube</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> geometry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Three.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BoxGeometry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> material</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Three.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MeshBasicMaterial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ color: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x00ff00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> cube</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Three.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Mesh</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(geometry, material);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">scene.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cube);</span></span></code></pre></div><h3 id="cube-parameters" tabindex="-1">cube parameters <a class="header-anchor" href="#cube-parameters" aria-label="Permalink to &quot;cube parameters&quot;">​</a></h3><ul><li>width: the width of the cube</li><li>height: the height of the cube</li><li>depth: the depth of the cube</li><li>widthSegments: the number of segments along the width of the cube</li><li>heightSegments: the number of segments along the height of the cube</li><li>depthSegments: the number of segments along the depth of the cube</li></ul><h2 id="interaction" tabindex="-1">interaction <a class="header-anchor" href="#interaction" aria-label="Permalink to &quot;interaction&quot;">​</a></h2><p>After completing the above steps, we have only created a simple cube. Next, we need to add some animation effects, such as rotation, scaling, and translation.</p><h3 id="orbitcontrols" tabindex="-1">OrbitControls <a class="header-anchor" href="#orbitcontrols" aria-label="Permalink to &quot;OrbitControls&quot;">​</a></h3><p>OrbitControls is a built-in three.js class that allows you to <code>control the camera</code> using the mouse or touch screen.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 4.1 Orbit controls（轨道控制器）可以使得相机围绕目标进行轨道运动。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  orbitControls </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OrbitControls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(camera, renderer.domElement);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //controls.update() must be called after any manual changes to the camera&#39;s transform</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  camera.position.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  orbitControls.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h3 id="animation" tabindex="-1">Animation <a class="header-anchor" href="#animation" aria-label="Permalink to &quot;Animation&quot;">​</a></h3><p>To add animation effects, we can use the requestAnimationFrame API. This method tells the browser to execute a specified function at the next repaint.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4.2 Animation（动画）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> animate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    requestAnimationFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(animate);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cube.rotation.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.01</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cube.rotation.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.01</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    renderer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(scene, camera);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  animate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="axeshelper" tabindex="-1">AxesHelper <a class="header-anchor" href="#axeshelper" aria-label="Permalink to &quot;AxesHelper&quot;">​</a></h2><p>AxesHelper is a built-in three.js class that can be used to visualize the axes of a coordinate system.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> axesHelper</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Three.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AxesHelper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 5 is the length of the axes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  scene.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(axesHelper);</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>x: red, y: green, z: blue x: vertical, y: horizontal, z: depth (vertical to screen)</p></div>`,32),W=JSON.parse('{"title":"setup three.js","description":"","frontmatter":{},"headers":[],"relativePath":"part-01/01-hello-threejs/README.md","filePath":"part-01/01-hello-threejs/README.md"}'),I={name:"part-01/01-hello-threejs/README.md"},L=Object.assign(I,{setup(u){return(a,t)=>(E(),g("div",null,[z,H,R,j(O),G]))}});export{W as __pageData,L as default};
