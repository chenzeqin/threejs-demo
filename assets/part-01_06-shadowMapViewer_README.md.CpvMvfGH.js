import{n as O,S as R,U as I,o as N,d as _,a as y,T as K,L,M as $,p as J,u as X,P as Y,W as Q,q as Z,O as ii,H as si,b as ei,k as ai,c as ti,r as ni,e as x,B as hi,A as pi,t as B,v as ri}from"./chunks/useContainer.DnsFfYTA.js";import{d as oi,a1 as li,y as di,z as ki,o as T,c as W,I as ci,j as f,a as H,a2 as wi}from"./chunks/framework.BU7m5Tfg.js";const Ei={uniforms:{tDiffuse:{value:null},opacity:{value:1}},vertexShader:`

		varying vec2 vUv;

		void main() {

			vUv = uv;
			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`,fragmentShader:`

		uniform float opacity;

		uniform sampler2D tDiffuse;

		varying vec2 vUv;

		#include <packing>

		void main() {

			float depth = 1.0 - unpackRGBAToDepth( texture2D( tDiffuse, vUv ) );
			gl_FragColor = vec4( vec3( depth ), opacity );

		}`};class P{constructor(i){const n=this,t=i.name!==void 0&&i.name!=="";let E;const o={x:10,y:10,width:256,height:256},l=new O(window.innerWidth/-2,window.innerWidth/2,window.innerHeight/2,window.innerHeight/-2,1,10);l.position.set(0,0,2);const d=new R,c=Ei,v=I.clone(c.uniforms),S=new N({uniforms:v,vertexShader:c.vertexShader,fragmentShader:c.fragmentShader}),M=new _(o.width,o.height),g=new y(M,S);d.add(g);let k,s;if(t){k=document.createElement("canvas");const e=k.getContext("2d");e.font="Bold 20px Arial";const p=e.measureText(i.name).width;k.width=p,k.height=25,e.font="Bold 20px Arial",e.fillStyle="rgba( 255, 0, 0, 1 )",e.fillText(i.name,0,20);const r=new K(k);r.magFilter=L,r.minFilter=L,r.needsUpdate=!0;const u=new $({map:r,side:J});u.transparent=!0;const b=new _(k.width,k.height);s=new y(b,u),d.add(s)}function h(){n.position.set(n.position.x,n.position.y)}this.enabled=!0,this.size={width:o.width,height:o.height,set:function(e,p){this.width=e,this.height=p,g.scale.set(this.width/o.width,this.height/o.height,1),h()}},this.position={x:o.x,y:o.y,set:function(e,p){this.x=e,this.y=p;const r=n.size.width,u=n.size.height;g.position.set(-window.innerWidth/2+r/2+this.x,window.innerHeight/2-u/2-this.y,0),t&&s.position.set(g.position.x,g.position.y-n.size.height/2+k.height/2,0)}},this.render=function(e){this.enabled&&(v.tDiffuse.value=i.shadow.map.texture,E=e.autoClear,e.autoClear=!1,e.clearDepth(),e.render(d,l),e.autoClear=E)},this.updateForWindowResize=function(){this.enabled&&(l.left=window.innerWidth/-2,l.right=window.innerWidth/2,l.top=window.innerHeight/2,l.bottom=window.innerHeight/-2,l.updateProjectionMatrix(),this.update())},this.update=function(){this.position.set(this.position.x,this.position.y),this.size.set(this.size.width,this.size.height)},this.update()}}const gi={name:"ShadowMapViewer"},ui=oi({...gi,setup(z){let i,n,t,E,o;const{el:l,width:d,height:c}=X(),{stop:v}=li(l,()=>{t.setSize(d.value,c.value),n.aspect=d.value/c.value,n.updateProjectionMatrix(),t.setSize(d.value,c.value),A()});function S(){i=new R}function M(){n=new Y(75,d.value/c.value,.1,1e3),n.position.set(0,8,20),n.lookAt(0,-1,0)}function g(){t=new Q,t.setSize(d.value,c.value),t.shadowMap.enabled=!0,t.shadowMap.type=Z,l.value.appendChild(t.domElement)}function k(){E=new ii(n,t.domElement),E.update()}let s,h;function e(){const a=new si(16777215,4210752);a.intensity=.3,a.position.set(0,10,0),i.add(a);const F=new ei(16777215,.3);i.add(F),s=new ai(16777215,.3),s.name="directionalLight",s.position.set(0,10,0),s.shadow.camera.zoom=2,s.castShadow=!0,s.shadow.camera.near=1,s.shadow.camera.far=12,s.shadow.camera.left=-10,s.shadow.camera.right=10,s.shadow.camera.top=10,s.shadow.camera.bottom=-10,i.add(s),h=new ti(16777215),h.name="spotLight",h.position.set(10,10,5),h.angle=Math.PI/6,h.penumbra=.2,h.castShadow=!0,h.shadow.mapSize.width=1024,h.shadow.mapSize.height=1024,h.shadow.camera.near=8,h.shadow.camera.far=20,i.add(h)}let p,r;function u(){const a=new ni(25,8,90,50);p=new y(a,new x({color:16711680,shininess:150,specular:16777215})),p.castShadow=!0,p.receiveShadow=!0,i.add(p),p.position.y=2,p.scale.multiplyScalar(.04);const F=new hi(1,1,1);r=new y(F,new x({color:65280,shininess:150,specular:16777215})),r.castShadow=!0,r.receiveShadow=!0,i.add(r),r.position.set(3,1,2);const q=new _(20,20),G=new x({opacity:.2,color:13421772,specular:10526880}),C=new y(q,G);C.rotation.x=-Math.PI/2,C.receiveShadow=!0,i.add(C)}function b(){o=new pi(1),i.add(o),i.add(new B(h.shadow.camera)),i.add(new B(s.shadow.camera))}let w,m;function U(){w=new P(h),m=new P(s),A()}function A(){const a=d.value*.2;w.position.x=10,w.position.y=10,w.size.width=a,w.size.height=a,w.update(),m.position.set(20+a,10),m.size.set(a,a),w.updateForWindowResize(),m.updateForWindowResize()}let D;const j=new ri;function V(){D=requestAnimationFrame(V),t.render(i,n);const a=j.getDelta();p.rotation.y+=1*a,p.rotation.x+=1*a,r.rotateX(1*a),r.rotateY(1*a),E.update(),w.render(t),m.render(t)}return di(async()=>{S(),M(),g(),k(),e(),u(),b(),U(),V()}),ki(()=>{cancelAnimationFrame(D),t.dispose(),E.dispose(),t.domElement.remove(),v()}),(a,F)=>(T(),W("div",{ref_key:"el",ref:l,"h-500px":"",class:"border-2 border-gray-300"},null,512))}}),mi=f("h1",{id:"shadowmapviewer",tabindex:"-1"},[H("ShadowMapViewer "),f("a",{class:"header-anchor",href:"#shadowmapviewer","aria-label":'Permalink to "ShadowMapViewer"'},"​")],-1),yi=f("h2",{id:"preview",tabindex:"-1"},[H("preview "),f("a",{class:"header-anchor",href:"#preview","aria-label":'Permalink to "preview"'},"​")],-1),fi=f("p",null,"in this example, we will create a shadow map viewer using three.js.",-1),vi=wi(`<h2 id="prepare-a-scene" tabindex="-1">prepare a scene <a class="header-anchor" href="#prepare-a-scene" aria-label="Permalink to &quot;prepare a scene&quot;">​</a></h2><p>First prepare a scene, create objects such as a rotating torus knot etc.create light sources, and enable shadows. This step is not elaborated here.</p><h2 id="create-a-shadow-map-viewer" tabindex="-1">create a shadow map viewer <a class="header-anchor" href="#create-a-shadow-map-viewer" aria-label="Permalink to &quot;create a shadow map viewer&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ShadowMapViewer } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;three/examples/jsm/utils/ShadowMapViewer.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> initShadowMapViewer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  spotLightShadowMapViewer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ShadowMapViewer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(spotLight);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  dirLightShadowMapViewer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ShadowMapViewer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(directionalLight);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // other rendering code...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  spotLightShadowMapViewer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(renderer);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  dirLightShadowMapViewer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(renderer);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="optimization" tabindex="-1">Optimization <a class="header-anchor" href="#optimization" aria-label="Permalink to &quot;Optimization&quot;">​</a></h2><p>update size on container resizing</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> resizeShadowMapViewer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> width.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  spotLightShadowMapViewer.position.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  spotLightShadowMapViewer.position.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  spotLightShadowMapViewer.size.width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  spotLightShadowMapViewer.size.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  spotLightShadowMapViewer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 直接赋值需要调用update</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  dirLightShadowMapViewer.position.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  dirLightShadowMapViewer.size.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(size, size); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不需要调用update</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  spotLightShadowMapViewer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateForWindowResize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  dirLightShadowMapViewer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">updateForWindowResize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,7),bi=JSON.parse('{"title":"ShadowMapViewer","description":"","frontmatter":{},"headers":[],"relativePath":"part-01/06-shadowMapViewer/README.md","filePath":"part-01/06-shadowMapViewer/README.md"}'),Fi={name:"part-01/06-shadowMapViewer/README.md"},Ci=Object.assign(Fi,{setup(z){return(i,n)=>(T(),W("div",null,[mi,yi,fi,ci(ui),vi]))}});export{bi as __pageData,Ci as default};
